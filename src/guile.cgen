/*
Copyright Remco Bras 2007,2008
This file is part of RPGE.

RPGE is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.

RPGE is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#include "guile.h"

SCM global_userdata = SCM_EOL;
sequence argvs;
SDL_mutex* argv_lock;
convertors(thread_argv);

void
argvs_init()
{
  argvs = sequence_init();
  argv_lock = SDL_CreateMutex();
}

char
scm_to_blocking_flag(SCM flag)
{
  return flag == SCM_BOOL_T;
}

SCM
guile_open_global_eventstack (SCM flag)
{
  char block = scm_to_blocking_flag(flag);
  return scm_from_int (eventstack_open (&global_usereventstack,block));
}

SCM
guile_close_global_eventstack (SCM userindex)
{
  eventstack_close (&global_usereventstack, scm_to_int (userindex));
  return SCM_UNSPECIFIED;
}

SCM
guile_get_global_event (SCM userindex)
{
  event e = eventstack_get_first_of_user (&global_usereventstack,
					  scm_to_int (userindex));
  return scm_cons (e.type, e.data);
}

SCM
guile_get_global_userdata (void)
{
  return global_userdata;
}

SCM
guile_set_global_userdata (SCM newdata)
{
  scm_gc_unprotect_object (global_userdata);
  global_userdata = newdata;
  scm_gc_protect_object (global_userdata);
  return SCM_UNSPECIFIED;
}

/*
Technically, the following is a simple, though somewhat useful scheme to pass a single SCM to a script on boot. The whole point of this is to allow scripts that take 'arguments' to be used, in a rather warped way, somewhat like a procedure.
*/

thread_argv
make_threadargv (Uint32 threadid, SCM argv)
{
  thread_argv ta;
  ta.threadid = threadid;
  ta.argv = argv;
  return ta;
}

char
guile_argv_threadids_equalp (object argv, object threadid)
{
  return get_obj_Uint32 (threadid) == get_obj_thread_argv (argv).threadid;
}

void
guile_exec_script_with_argv (char *filename, SCM argv)
{
  Uint32 threadid = SDL_ThreadID ();
  int index = sequence_position (argvs, make_Uint32_obj (threadid),
				 guile_argv_threadids_equalp);
  SDL_mutexP(argv_lock);
  if (index != -1)
    argvs.data[index] =
      make_thread_argv_obj (make_threadargv (threadid, argv));
  else
    index =
      sequence_append (&argvs,
		       make_thread_argv_obj (make_threadargv
					     (threadid, argv)));
  SDL_mutexV(argv_lock);
  scm_c_primitive_load (filename);
  SDL_mutexP(argv_lock);
  sequence_remove_at (&argvs, index);
  SDL_mutexV(argv_lock);
}

SCM
guile_API_exec_script_with_argv (SCM filename, SCM argv)
{
  guile_exec_script_with_argv (scm_to_locale_string (filename), argv);
  return SCM_UNSPECIFIED;
}

SCM
guile_get_argv ()
{
  int index = sequence_position (argvs, make_Uint32_obj (SDL_ThreadID ()),
				 guile_argv_threadids_equalp);
  if (index != -1)
    return ((thread_argv *) argvs.data[index].data)->argv;
  else
    return SCM_EOL;
}

SCM
guile_open_font (SCM filename, SCM size)
{
  return
    scm_from_int (open_font
		  (scm_to_locale_string (filename), scm_to_int (size)));
}

SCM
guile_close_font (SCM index)
{
  close_font (scm_to_int (index));
  return SCM_UNSPECIFIED;
}

SCM
guile_make_text (SCM x, SCM y, SCM string, SCM font, SCM red, SCM green,
		 SCM blue)
{
  SDL_Color c;
  c.r = scm_to_uint8 (red);
  c.g = scm_to_uint8 (green);
  c.b = scm_to_uint8 (blue);
  char* str = scm_to_locale_string(string);
  SCM retval = 
    scm_from_int (add_text
		  (make_text
		   (scm_to_uint (x), scm_to_uint (y),
		    str, scm_to_int (font), c)));
  free(str);
  return retval;
}

SCM
guile_destroy_text (SCM textindex)
{
  remove_text (scm_to_int (textindex));
  return SCM_UNSPECIFIED;
}

SCM 
scm_c_safe_load(char* filename)
{
  SCM load_mutex = scm_variable_ref(scm_c_lookup("load-mutex"));
  scm_lock_mutex(load_mutex);
  scm_c_primitive_load(filename);
  scm_unlock_mutex(load_mutex);
  return SCM_UNSPECIFIED;
}

SCM
guile_safe_load(SCM filename)
{
  char* path = get_path(scheme_paths,scm_to_locale_string(filename));
  if(path)
    {
      scm_c_safe_load(path);
      free(path);
    }
  else
    fprintf(stderr,"RPGE: Cannot find Scheme source file in . or Scheme search paths: %s\n",scm_to_locale_string(filename));
  return SCM_UNSPECIFIED;
}

SCM
guile_move_text(SCM index, SCM point)
{
  move_text(scm_to_int(index),scm_to_uint(scm_car(point)),scm_to_uint(scm_cdr(point)));  
  return SCM_UNSPECIFIED;
}

SCM
guile_get_text_coordinates(SCM index)
{
  int ind = scm_to_int(index);
  text* t = (text*)texts.data[ind].data;
  return scm_cons(scm_from_uint(t->x),scm_from_uint(t->y));
}

SCM
obj_to_scm(object o)
{
  /*To do: implement dispatching*/
  if(o.typeinfo == TYPE_STRING)
    return scm_from_locale_string(*((char**)o.data));
  return SCM_EOL;
}

SCM
guile_sequence_to_list(sequence s)
{
  SCM last = scm_cons(obj_to_scm(s.data[0]),SCM_EOL),current,first = last;
  for(int i = 1; i < s.objcount; i++)
    {
      current = scm_cons(obj_to_scm(s.data[i]),SCM_EOL);
      scm_set_cdr_x(last,current);
      last = current;
    }
  return first;
}

SCM
guile_get_text_line_list(SCM index)
{
  return guile_sequence_to_list(((text*)texts.data[scm_to_int(index)].data)->buffers);
}

SCM
guile_run_repl()
{
  /*Since the repl_signal mutex is locked by the main loop, use an event to signal it needs to be released*/
  SDL_Event* e = malloc(sizeof(SDL_Event));
  e->type = SDL_USEREVENT;
  e->user.code = RELEASE_REPL_MUTEX;
  SDL_PushEvent(e);
  return SCM_UNSPECIFIED;
}

SCM
guile_stop_repl()
{
  SDL_Event* e = malloc(sizeof(SDL_Event));
  e->type = SDL_USEREVENT;
  e->user.code = ACQUIRE_REPL_MUTEX;
  SDL_PushEvent(e);
  return SCM_UNSPECIFIED;
}
