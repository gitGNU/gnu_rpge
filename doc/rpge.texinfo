\input texinfo @c -*-texinfo-*-

@c %**start of header
@setfilename rpge.info
@settitle Role Playing Game Engine
@c %**end of header

@copying
  Copyright @copyright{}  2007,2008,2009  Remco Bras.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled "GNU
  Free Documentation License".
@end copying

@titlepage
  @title Role Playing Game Engine
  @subtitle Version 0.0.2
  @author Remco Bras
  @page 
  @vskip 0pt plus 1filll
  @insertcopying
@end titlepage  

@contents

@node Top, About rpge and obtaining it, (dir), (dir)
@ifnottex
@top Role Playing Game Engine
This manual is for rpge, version 0.0.2.
@end ifnottex

@menu
* About rpge and obtaining it::  
* Invoking rpge::               
* rpge's view of the world::    
* Communication in rpge::       
* API Reference::               
* GNU Free Documentation License::  
@end menu

@node About rpge and obtaining it, Invoking rpge, Top, Top
@chapter About rpge and obtaining it

@menu
* About rpge and this manual::  
* Getting a copy::              
* Installation::                
@end menu

@node About rpge and this manual, Getting a copy, About rpge and obtaining it, About rpge and obtaining it
@section About rpge and this manual
rpge is a GNU package, providing an engine for two-dimensional graphical role playing games. It is driven and extended by writing programs in GUILE, a dialect of Scheme.
This manual is for rpge 0.0.2 and aims to document the parts of the workings of rpge that people using it should know about, the way rpge is driven using GUILE and
how rpge can be obtained, installed and otherwise used. 

@node Getting a copy, Installation, About rpge and this manual, About rpge and obtaining it
@section Getting a copy

rpge can be obtained using anonymous git or from the web. In case you wish to use anonymous git, the following
command creates a local copy of the rpge git repository:
@code{git clone git://git.savannah.gnu.org/rpge.git}.
Those who prefer the web can download a copy of a release from the GNU mirrors, a list of which is kept at @indicateurl{http://www.gnu.org/prep/ftp.html}, or, if necessary,
directly from @indicateurl{ftp://ftp.gnu.org} by FTP.
Either of these options will allow you to receive a copy of rpge, but keep in mind that the sources in git will be more current, but probably also buggier than the releases. 

@node Installation,  , Getting a copy, About rpge and obtaining it
@section Installation
To install rpge, your system will, at the time of writing (users of Git are advised to check the file 'README' in the root of the source tree for possibly updated information),
need the following:
@itemize @bullet
@item An ISO C99-compliant C compiler that does not attempt to link when passed the -c option
@item A make program compatible with Makefiles produced by GNU configure scripts
@item A UNIX shell to execute GNU configure scripts
@item sed
@item The SimpleDirectmediaLayer libraries and development files, including the sdl-image and sdl-ttf libraries
@item GUILE, including the development files and libraries, 1.8 or later. Several versions in the 1.8 series still appear to break rpge. Version 1.8.5 appears to work, at least on x86.
@end itemize

If you have the above dependencies, you can install rpge by moving to the directory containing the source code and running @code{./configure && make} to build rpge.
Once the build is complete and error-free, rpge can be installed by running @code{make install} as a user with administrator privileges.

@node Invoking rpge, rpge's view of the world, About rpge and obtaining it, Top
@chapter Invoking rpge

@menu
* A summary of command-line options::  
* rpge configuration files::    
@end menu

@node A summary of command-line options, rpge configuration files, Invoking rpge, Invoking rpge
@section A summary of command-line options
Rpge is invoked on the command-line using @code{rpge @var{options}} in which options is one or more of the following, with their required arguments:
@itemize
@item -v or --version: Prints version information and exits.
@item -h or --help: Prints a summary of usage and options and exits.
@item -f @var{file}: Changes the default initialization file handled at startup from .rpge to @var{file}
@end itemize

@node rpge configuration files,  , A summary of command-line options, Invoking rpge
@section rpge configuration files
This section describes the configuration files used by rpge. By default, rpge reads the configuration file named .rpge in the current directory when started. This can be overridden using the -f option, for example using @command{rpge -f foo.conf} to use foo.conf instead. 

Rpge provides two pre-made configuration files, called default.conf and skeleton.conf. Default.conf sets up the default load paths and scheme libraries, as documented elsewhere in this manual. This file is intended to be included in your own configuration file. The other pre-made configuration file, skeleton.conf, does this and can serve as an example. Both files are created when rpge is installed and adjusted to the system-specific location of included files.

@menu
* Configuration file basics::   
* Pre-defined directives::      
* Defining directives::         
* Caveats when running code from configuration files::  
@end menu

@node Configuration file basics, Pre-defined directives, rpge configuration files, rpge configuration files
@subsection Configuration file basics
A configuration file in rpge consists of a series of commands, each on one line. Each command instructs rpge to either load a file of Scheme code or execute another action. The command to execute a file of Scheme source is just the filename of the file. This filename can be relative to the current directory, an absolute path or a path relative to any directory in the Scheme load path. 
To execute another action, you can use a directive, which is a command of the form @command{@var{directive-name}:@var{argument}}. The meaning of argument depends on the directive. 
Comments start with # and last for the remainder of the line.

@node Pre-defined directives, Defining directives, Configuration file basics, rpge configuration files
@subsection Pre-defined directives
In rpge, several directives are pre-defined. Many of these deal with the locations where rpge searches for specific types of files. All directives are listed below in alphabetical order.

@command{font-dir:@var{name}}
Add name to the load path for fonts. By default, this path includes the fonts subdirectory in the installation path for rpge's data.

@command{image-dir:@var{name}}
Add name to the load path for images. The images subdirectory of the installation path for rpge's data is included by default.

@command{map:@var{name}}
Load the map named name. As with Scheme source files, name may be relative to any directory in the map path, relative to the working directory or absolute.

@command{map-dir:@var{name}}
Add name to the load path for maps. The default load path for maps includes both the examples and maps subdirectories of the directory in which rpge's data is installed.

@command{scheme-dir:@var{name}}
Add name to the load path for Scheme source files. The default load path consists of the scm and examples subdirectories in the installation path of rpge's data.

@node Defining directives, Caveats when running code from configuration files, Pre-defined directives, rpge configuration files
@subsection Defining directives
Scheme code can define new directives, using @command{(register-directive! @var{name} @var{proc})}, where @var{name} is a string naming the directive and @var{proc} is a procedure of one argument. When the directive is used in a configuration file, proc will be called with one string argument, containing the argument to the directive, with any trailing spaces and comments removed.

@node Caveats when running code from configuration files,  , Defining directives, rpge configuration files
@subsection Caveats when running code from configuration files
Scheme code run from configuration files is loaded through safe-load, which is an rpge primitive created to avoid threading bugs due to multiple files loading at once. Essentially, this means that, whenever a file is loaded from a configuration file, a mutex is locked. 
Normally, this causes no problem whatsoever, provided one does not fork off threads to load other files and the script terminates at some point. 
In the former case, one should do the loading in the forked threads using safe-load, for example by using @command{(make-thread safe-load ``foo.scm'')} instead of @command{(make-thread load ``foo.scm'')}. The latter case requires that the script that does not terminate is run from a new thread rather than directly from the configuration file. Furthermore, it should @command{(unlock-mutex load-mutex)} once it is done defining variables, so other files can be loaded.

@node rpge's view of the world, Communication in rpge, Invoking rpge, Top
@chapter rpge's view of the world

@menu
* Overview::                    
* Tiles::                       
* Mobs::                        
@end menu

@node Overview, Tiles, rpge's view of the world, rpge's view of the world
@section Overview
In rpge, a world is essentially a flat, 2-dimensional surface, divided into tiles. These tiles are small, rectangular areas, with configurable widths and heights. 
On these tiles, objects called mobs can move around in any way they wish, possibly blocked by certain tiles while freely passing over others. 
These mobs are each rendered as a so-called sprite, a 2-dimensional picture. The picture to render is determined by the file loaded for the mob and its animation status.

In the future, this model could be expanded to allow any number of concurrent 'worlds' on a single rpge instance, something that could be especially useful if rpge were 
ever networked. At present though, there is only one world and parallel universes are merely science-fiction. 

@node Tiles, Mobs, Overview, rpge's view of the world
@section Tiles
rpge tiles need a little more discussion, since they have some interesting properties that users may want to be aware of. First, all tiles in the tilegrid are independent. 
Changing the data of a single tile does not change the data of the others, with one important exception. The one exception is that changing the image data used by a tile
directly (something only possible through either runtime reloading of images or modifying the rpge source, there is no API function) changes the image data used by all tiles
using the image of the same filename and index. 

Second, rpge differentiates between the various directions a mob arrives at a tile from. For example, if a mob is moving right when it hits a blocking tile, that tile will
only block if the BLOCK_LEFT flag is set. Similarly, for a mob arriving at any tile, the blocking flag for the corresponding edge is checked. 

Third, rpge has the facilities in place to differentiate between two types of mobs (dubbed 'ground' and 'air' mobs) and block none, one or both of those. However, these flags
are unused at the time of writing. 

Fourth, though rpge does check for tile blocking while a mob is moving, mobs moving over tiles while they are being changed may cause some bugs. For example, a mob
moving over a tile that does not block while it is being modified to block will probably proceed to move over the tile anyway, as blocking was checked when the mob entered
the tile and will not be checked when the mob leaves it.

@node Mobs,  , Tiles, rpge's view of the world
@section Mobs
Mobs, like tiles, have some interesting properties. The most important of these is the ability to add any data you want to any mob you want. This data, dubbed the 'mob user data
', can be queried and set from GUILE. By default, it is the empty list marker and protected from the garbage collector. Since rpge only allows a single GUILE value of user data
for every mob, it is recommended to fill this space with a list, table or other compound data structure so you can put arbitrarily large amounts of data in this space. The
example statistics system and other systems that work with mob user data will presume this data is a table. It is also worth noting that the default mob bootstrap procedure
sets this data to an empty table.

This bootstrap procedure is another property of mobs that users can use to enhance mobs. Since systems using mob user data may need initialization, rpge provides this procedure,
which is called by the GUILE procedure make-mob only, not by the primitive create-mob, to set the initial value of this data. The procedure may however do any arbitrary amount
of processing or data creation, as long as it takes a single argument representing the mob being created. 

Closer to the C side of things, mobs are currently considered as wide and as high as a single tile. Therefore, rpge will render sprites of SPRITE_WIDTH width and SPRITE_HEIGHT
height, both of those macros being equal to the respective dimensions of tiles. When determining what sprite to render, rpge looks up the image data associated with the image
index given in the mob (images are loaded globally in rpge, to save space) and takes a rect of the specified width and height, starting at a starting point determined by the
current animation of the mob. Animations are laid out horizontally in the image data, being right next to each other and SPRITE_WIDTH wide each. Individual frames of a certain
animation are in its column, right below each other with no padding. Essentially, rpge treats the image data as a frame grid, indexed in the horizontal direction by the index
of the mob's current animation and in the vertical direction by the index of the mob's current frame. Animations can loop automatically if that is desired. 

In addition to being animated, mobs can move. rpge provides two primitives for making mobs move, the generic move-mob which immediately changes the direction and
movement of a mob, regardless of any current velocity. Since this is not very practical if you want mobs to move along a path specified by keying it in asynchronously,
rpge natively supports queueing up movements, which is done using mob-add-movement. If the mob is not moving, this procedure has the same effect as move-mob. Otherwise,
the movement is queued up in a FIFO buffer, the first element of which is started when the mob is done with its current movement, and so on. This buffer is not cleared by calls
to move-mob. If mobs collide however, the buffer is instantly cleared on both colliding mobs. The rationale behind this is that 
rpge should wait for users to issue new commands, since a collision implicitly is a result of being unable to execute movement commands.

Finally, mobs support rpge's event mechanism, which is currently hardly being used. In the future, this could be used to send an event whenever a mob completes a motion or,
more generally, changes its motion. This would be useful for animation purposes. 

@node Communication in rpge, API Reference, rpge's view of the world, Top
@chapter Communication in rpge
In rpge, there are two kinds of communication, being communication between rpge itself and the scripts running in it and communication between the scripts themselves.  The latter type of communication can be handled in any way the users want, just like in any multithreaded program. Communication between rpge and the engine is not so freeform, but is similar to communication in GTK, Xlib or a similar system.

This communication is handled by so-called events, which live on things called 'eventstacks'. Regardless of the specific stack, events themselves are simple messages, basically consisting of something to identify the particular type of message and whatever the user should know about it.

Another property of eventstacks one should be aware of is that they need to be opened before usage. Once opened, it is guaranteed that the user receives any event that arrives after the stack was opened. A stack without users does not accumulate any events at all. Regardless of this last property, it is advised to add any useful event to the appropriate stack, even if users are not guaranteed. 

Stacks themselves live in rpge, being assigned to either a certain object or just being global. There is currently one global stack and every single mob has a stack of its own. Global stacks should be used for events that are not related to anything that has a stack of its own and is a single object, for example a collision between two mobs or a keypress. Stacks assigned to the object are for events related to the object exclusively, for example an event sent when a mob moves across a tile boundary. 

@menu
* Event Reference::             
@end menu

@node Event Reference,  , Communication in rpge, Communication in rpge
@section Event Reference

This section lists all current events. Note that events, to GUILE, are pairs whose car holds data identifying the particular type of event and whose cdr holds data associated
with the specific event itself. 

Global events:
@itemize
@item key-down:This event specifies a keypress. The car is the symbol 'key-down, the cdr is a symbol indicating the key pressed. Usually, this is the letter typed by pressing  this particular key. For example, if the a key is pressed without holding down shift, the cdr of the associated event will hold the symbol 'a. Newlines, tabs  and spaces are converted to 'newline, 'tab and 'space, respectively.

@item collision:This event indicates a collision between two mobs. Its car is the symbol 'collision, its cdr is a pair, holding the two mobs that collided, in no particular order.

@end itemize

Mob events:
@itemize
@item tile-change:This event is sent whenever a mob (technically a mob's center) crosses a tile boundary. Its car is the symbol 'tile-change, its cdr is a pair of pairs, whose car holds a pair of the x and y coordinates (in tile coordinates) the mob had and whose cdr holds a pair of the new x and y coordinates.

@end itemize

@node API Reference, GNU Free Documentation License, Communication in rpge, Top
@appendix API Reference
This section describes the entire rpge GUILE API, all the way from primitives to the stuff implemented in the examples that are part of the rpge distribution.

@menu
* Primitives::                  
* Scheme-level APIs::           
@end menu

@node Primitives, Scheme-level APIs, API Reference, API Reference
@section Primitives

Primitives related to mobs:
@itemize
@item @code{(create-mob @var{x} @var{y} @var{sprite})}:

Creates a mob on the tilegrid at point (@var{x},@var{y}). Note that @var{x} and @var{y} are tile coordinates, not pixel coordinates. The mob is rendered using @var{sprite},
specified as a string containing the filename of the sprite to be loaded. Animation data and the like are defaulted to zero.

@item @code{(move-mob @var{mob} @var{x} @var{y} @var{frames})}:

Move @var{mob}, over @var{frames} frames, @var{x} tiles to the right and @var{y} tiles down. This modifies the movement data of the mob, canceling any current movement.

@item @code{(add-mob-movement @var{mob} @var{x} @var{y} @var{frames})}:

Queue up the movement that would be done by the mob if move-mob was called with the same arguments. Queued up movements are executed in order once the mob is done moving.

@item  @code{(set-mob-animation @var{mob} @var{animation} @var{start} @var{target} @var{framesbetween} @var{loop})}:

Animate @var{mob}, using animation @var{animation}, starting at frame @var{start}, ending at frame @var{target}, changing to the next frame every @var{framesbetween} frames.
If @var{loop} is true, the animation loops until stopped. Note that frames and animations are specified by indices, which start at zero.

@item @code{(stop-mob-animation @var{mob})}

Immediately stop the animation of @var{mob} in its current state.

@item @code{(get-mob-data @var{mob})}

Returns the piece of global data associated with @var{mob}.

@item @code{(set-mob-data @var{mob} @var{value})}

Set the piece of global data associated with @var{mob} to @var{value}.

@item @code{(open-mob-events @var{mob})}

Open the eventstack of @var{mob} and return the user index associated with this action.

@item @code{(get-mob-event @var{mob} @var{user})}

Get the next event on @var{mob} for @var{user}, in which @var{user} is an index returned by open-mob-events.

@item @code{(close-mob-evetns @var{mob} @var{user})}

Close the eventstack on @var{mob} for @var{user}, indicating that @var{user} does not want to receive any new events on this stack.

@item @code{(destroy-mob @var{mob})}

Destroy @var{mob}.

@end itemize

Primitives related to tiles and grids thereof:

@itemize

@item @code{(create-tile @var{sprite} @var{clipping-rect} @var{blocking})}

Creates a tile, using @var{sprite} as the filename to load a sprite from, @var{clipping-rect} as a list representing a rectangular clipping area,
containing the part of the sprite image that should be used for rendering, and @var{blocking} as an identifier indicating which mobs are blocked.
The types of blocking rpge currently checks for are block-<direction>, where direction is left, right up or down. The particular direction
indicates the edge the mob to be blocked hits, i.e. a tile with block-right for @var{blocking} blocks mobs attempting to cross its right edge.
There is a single combined constant combining all four directions, conveniently named block-all-directions. Other variations can be obtained by
simply adding individual constants.

@item @code{(init-tilegrid @var{width} @var{height})}

Resets the main tilegrid to a new grid of dimensions @var{width} and @var{height}. This should be called once, when initializing the game map.
Note that the tilegrid created by this procedure does not have any tiles set and all tiles should be set manually.

@item @code{(set-tile @var{x} @var{y} @var{tile})}

Sets the tile at (@var{x},@var{y}) to @var{tile}.

@item @code{(set-all-tiles @var{tile})}

Sets all tiles to @var{tile}.

@end itemize

Primitives related to windows:

@itemize

@item @code{(create-window @var{width} @var{height} @var{x} @var{y} @var{sprite} @var{spritewidth} @var{spriteheight})}

Creates a window @var{width} pixels wide and @var{height} pixels high, with its top-left corner at (@var{x},@var{y}) (in pixel coordinates). The window is filled with
a rectangular tile, @var{spritewidth} pixels wide and @var{spriteheight} pixels wide, taken from the image file @var{sprite}. Note that the tile is hardwired to have its 
top-left corner at (0,0).

@item @code{(remove-window @var{window})}

Destroys @var{window}.

@end itemize

Font-related primitives:

@itemize

@item @code{(open-font @var{filename} @var{size})}

Opens the font referenced by @var{filename}, with a font size of @var{size}.

@item @code{(close-font @var{font})}

Closes @var{font}.

@end itemize

Text-related primitives:

@itemize

@item @code{(make-text @var{x} @var{y} @var{text} @var{font} @var{red} @var{green} @var{blue})}

Create floating text at pixel coordinates (@var{x},@var{y}), rendering @var{text}, using @var{font}. The text is rendered in the color specified by @var{red},@var{green}
and @var{blue}, where each variable represents the intensity of the color that is its namesake, on a scale from 0 to 255, inclusive.

@item @code{(destroy-text @var{text})}

Destroy @var{text}.

@end itemize

Primitives controlling the main camera:

@itemize

@item @code{(get-camera-x)}
@item @code{(get-camera-y)}

These return the x and y-coordinates, respectively, of the main camera, in tile coordinates. 

@item @code{(set-camera-x @var{x})}
@item @code{(set-camera-y @var{y})}

Set the coordinates of the main camera, in tile coordinates. 

@end itemize

Global miscellaneous primitives:

@itemize

@item @code{(get-global-data)}

Returns the current value of the global data stored inside rpge.

@item @code{(set-global-data @var{value})}

Sets the current value of the global data, while protecting it from the garbage 
collector. This should be called with something like a list or a table, so it can be
shared across scripts. The default scripts set this to a table and store data in that.

@item @code{(open-global-events)}

Opens the global eventstack, returning a user index.

@item @code{(get-global-event @var{user})}

Returns the next global event in line for @var{user}.

@item @code{(close-global-events @var{user})}

Closes the global eventstack for @var{user}.

@item @code{(get-argv)}

Gets the current argument vector of the thread, roughly presumed to be equal to
the 'arguments' the script was 'called' with.

@item @code{(load-with-argv @var{script} @var{arglist})}

Execute @var{script} in the current thread, passing it @var{arglist} as its 
arguments.

@item @code{(safe-load @var{script})}

Load @var{script} safely, that is, avoid crashes due to concurrent load starts
and ends.

@end itemize

@node Scheme-level APIs,  , Primitives, API Reference
@section Scheme-level APIs

In addition to the primitives defined by the rpge core, the default rpge initialization file loads several
files that define many Scheme functions for use with rpge. Usually, these are meant to provide functionality
that the developers felt shouldn't be 'hardcoded' in rpge and can be replaced by an equivalent built on either
GUILE itself or a combination of GUILE and the rpge primitives described in the previous section.

In the default initialization file, files are ordered in such a way that, at the very least, they will be 
loaded after their dependencies have been loaded. Therefore, if you replace files, it is recommended to check if files
loaded after the deleted file will still load and the functions they define will still run. For example, not loading table.guile
, which is referenced at the very start of the default initialization file, will break most functions in files loaded later,
with the exception of utils.guile, which does not use any tables at all. 

This section lists the APIs in the order in which they are loaded by default, roughly the order in which they depend on
each other.

Table API (defined in table.guile):
@itemize
@item @code{(init-table)}
Returns a fresh, initialized table.

@item @code{(table? @var{table})}
Returns #t if @var{table} looks like a table. This function is not perfectly accurate.

@item @code{(add-to-table @var{table} @var{key} @var{value})}
Returns @var{table}, with @var{key} bound to @var{value}. This does not modify the original @var{table}.

@item @code{(add-to-table! @var{table} @var{key} @var{value})}
Returns @var{table}, modified to include @var{key} bound to @var{value}.

@item @code{(get-from-table @var{table} @var{key})}
Returns the value @var{key} is bound to in @var{table}.

@item @code{(set-in-table! @var{table} @var{key} @var{value})}
Bind @var{key} to @var{value} in @var{table},modifying it. Returns 'error 
if @var{key} is not bound in @var{table}.

@item @code{(multi-key-find-with-list @var{table} @var{keylist})}
Returns the value bound to the keylist in @var{table}. Essentially,
for a list of length n, this returns the value bound to the successive
members of the list in @var{table} and n-1 sub tables. On error, this returns
'() if a table does not contain the right key and 'error if one of the sub
tables is not a table.

@item @code{(multi-key-find @var{table} . keys)}
The same as the above, but using the rest argument keys as the key list.

@item @code{(multi-key-add! @var{table} @var{keylist} @var{value})}
Using the same conventions for sub tables as the above two functions, add
@var{value} to a subtable of @var{table}.

@item @code{(multi-key-set! @var{table} @var{keylist} @var{value})}
Using the same sub table conventions, modify the value in a subtable of @var{table},
 setting it to @var{value}.

@item @code{(remove-from-table! @var{table} @var{key})}
Modifies @var{table}, removing the binding of @var{key}.

@end itemize

Key binding API (defined in keys.scm):

@itemize
@item @code{(bind-key @var{key} @var{proc})}
Add a new binding, binding @var{key} to @var{proc}, where @var{proc} is a procedure of no arguments.

@item @code{(get-binding @var{key})}
Get the procedure bound to @var{key}, or '() if none can be found.

@item @code{(remove-binding @var{key})}
Undo the current binding to @var{key}.

@end itemize

Mob event API (defined in mob_events.scm):

@itemize

@item @code{(mob-tracking-init)}
Initialize mob event handling.

@item @code{(add-tracked-mob! @var{mob})}
Make the mob event system track @var{mob}, handling events on this mob.

@item @code{(remove-tracked-mob! @var{mob})}
Make the mob event system stop tracking @var{mob}.

@item @code{(init-mob-bindings @var{mob})}
Initialize event binding for @var{mob}.

@item @code{(bind-mob-event @var{mob} @var{event} @var{proc})}
Bind @var{event} to @var{proc} on @var{mob}. @var{proc} should be a procedure of
1 argument, the event sent by rpge, which is a pair of a type (usually a symbol) and
some associated data.

@item @code{(execute-mob-binding @var{mob} @var{event})}
Execute the procedure bound to @var{event} for @var{mob}, passing it the event. Note that
for this procedure, @var{event} should contain the full event sent by rpge, but while binding,
it should contain the type data for the event.

@end itemize

Mob bootstrapping API (defined in mobutils.scm):

@itemize

@item @code{(get-mob-bootstrap-proc)}
Returns the current mob bootstrap procedure, or '() if none was defined.

@item @code{(set-mob-bootstrap-proc! proc)}
Set current mob bootstrap proc to proc, or define it to proc if it was not defined yet.

@item @code{(make-mob @var{x} @var{y} @var{sprite})}
Make a mob using create-mob, passing it the arguments passed. Then, apply the mob boostrap procedure, if any, to the newly made mob.
This procedure should be used whenever you 'just want to make a mob'. Use create-mob only if you have an explicit reason to avoid bootstrapping.

@end itemize

Mob statistics API (defined in stats.scm):

@itemize

@item @code{(stats-init @var{mob})}
Initialize the statistics system on the mob. Like many default procedures, this relies on the mob data being a valid table.
It is recommended to call this and related procedures in the mob bootstrap procedure.

@item @code{(get-stat @var{mob} @var{stat})}
Get the value of @var{stat} for @var{mob}. If @var{stat} is not set, this returns '().

@item @code{(set-stat @var{mob} @var{stat} @var{value})}
Set the value of @var{stat} to @var{value} for @var{mob}. If @var{stat} is not set, this implicitly defines it.

@item @code{(procedural-stats-init)}
Initialize the procedural stats system. This requires that the global userdata is a valid table.

@item @code{(add-procedural-stat-proc! @var{stat} @var{proc})}
Add @var{stat} as a procedural stat, meaning that get-stat will call @var{proc} on the mob passed to get-stat if @var{stat} is requested.

@item @code{(get-stat-proc @var{stat})}
Returns the procedure used to calculate @var{stat}.

@item @code{(remove-procedural-stat-proc! @var{stat})}
Remove the procedure bound to @var{stat}. After this, @var{stat} will be looked up by value on the mob, rather than being calculated using a procedure.

@end itemize

The above APIs usually have initialization procedures, which need to be called before using them. If the description of such a procedure does not
mention any other constraints, it should be presumed that the global userdata needs to be a table and, for procedures that initialize something for a mob,
the mob's user data must be a valid table as well. 

@node GNU Free Documentation License,  , API Reference, Top
@unnumbered GNU Free Documentation License
@include fdl.texi

@bye
