;
;Copyright Remco Bras 2007,2008
;This file is part of RPGE.
;
;RPGE is free software; you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation; either version 3 of the License, or
;(at your option) any later version.
;
;RPGE is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <http://www.gnu.org/licenses/>
;

(define make-rect list)

(define block-none 0)
(define block-left 4)
(define block-right 8)
(define block-up 16)
(define block-down 32)
(define block-all (+ block-left block-right block-up block-down))
(define (load-in-thread filename)
	(make-thread load filename))
        
(defmacro closure-gen (expression)
  (let ((s (gensym)))
   `(let ((,s ,expression))
      (lambda () ,s))))
        
;Generally used in case one needs to combine two procedures, essentially, for bodies b and c, this produces a lambda whose body is roughly the equivalent
;of (begin b c).

(define (interleave p q)
  (lambda args
    (apply p args)
    (apply q args)))

(define (exec p . args)
  (if (string? p) (load-with-argv p args)
      (if (procedure? p) (apply p args))))

(defmacro cond-interleave (p q)
  (let ((x (gensym)) (y (gensym)))
  `(lambda ,x
     (let ((,y (apply ,p ,x)))
       (if (null? ,y)
	   (apply ,q ,x)
	   ,y)))))

(define (no-op . anything)
  'DONE)

;General looping stuff, used in bordered-window creation. 
(defmacro collect-generic (combinator finalizer bindings test . expressions)
         (let ((foo (gensym)))
            `(do ,(cons (list foo (quote '())) bindings)
                 (,test (,finalizer ,foo))
               (set! ,foo (,combinator (begin ,@expressions)
                                       ,foo)))))

(defmacro collect (bindings test . expressions)
         `(collect-generic cons reverse! ,bindings ,test ,@expressions))

(defmacro collect-append (bindings test . expressions)
         `(collect-generic (lambda (x y) (append y x)) (lambda (x) x) ,bindings ,test ,@expressions))

(define (hop proc l)
  (do ((liz l (proc liz)) (res '() (cons (car liz) res)))
      ((null? liz) (reverse! res))))

(define (safe-repeater proc n)
  (lambda (val)
    (define (loop tmp m)
      (cond ((or (null? tmp) (= m n)) tmp)
	    (else 
	     (loop (proc tmp) (1+ m)))))
    (loop val 0)))

(defmacro aif (test then else)
  `(let ((it ,test))
     (if it
         ,then
         ,else)))

(defmacro alambda (arglist . body)
  `(letrec ((self (lambda ,arglist ,@body)))
     self))