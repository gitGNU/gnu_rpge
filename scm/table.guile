;Copyright 2007,2008 Remco Bras
;
;This file is part of the RPGE.
;
;RPGE is free software; you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation; either version 3 of the License, or
;(at your option) any later version.
;
;RPGE is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;    along with this program.  If not, see <http://www.gnu.org/licenses/>
;

(define (init-table)
  (cons 'table '()))
  
(define (add-to-table table key value)
  (append table (cons (cons key value) '())))

(define (get-from-table table key)
  (cond 
        ((null? table) '())
        ((eq? (car table) 'table)
          (get-from-table (cdr table) key))
        ((eq? (caar table) key)
          (cdar table))
        (else
          (get-from-table (cdr table) key))))
          
(define (set-in-table! table key value)
  (cond
        ((null? table) 'error)
        ((eq? (car table) 'table)
          (set-in-table! (cdr table) key value))
        ((eq? (caar table) key)
          (set-cdr! (car table) value))
        (else
          (set-in-table! (cdr table) key value))))

(define (table? table)
  (cond
    ((pair? table) (eq? (car table) 'table))
    (else
      #f)))
      
(define (multi-key-find-with-list table keys)
  (cond
    ((null? table) '())
    ((not (pair? table)) 'error)
    ((eq? (car table) 'table)
      (multi-key-find-with-list (cdr table) keys))
    ((eq? (caar table) (car keys))
      (cond
        ((null? (cdr keys))
          (cdar table))
        (else
          (multi-key-find-with-list (cdar table) (cdr keys)))))
    (else
      (multi-key-find-with-list (cdr table) keys))))
          
(define (multi-key-find table . keys)
  (multi-key-find-with-list table keys))
  
(define (add-to-table! table key value)
  (append! table (cons (cons key value) '())))
  
(define (multi-key-add! table keylist value)
  (define (multi-key-add!-sub table keylist value)
    (let ((subtable (get-from-table table (car keylist))))
      (cond
        ((null? subtable) 
          (cond
            ((null? (cdr keylist))
              (add-to-table! table (car keylist) value))
            (else
              (add-to-table! table (car keylist) (init-table))
              (multi-key-add!-sub (get-from-table table (car keylist)) (cdr keylist) value))))
        ((not (pair? subtable))
          'error)
        (else
          (multi-key-add!-sub subtable (cdr keylist) value)))))
   (let ((result (multi-key-add!-sub table keylist value)))
     (if (eq? result 'error)
       'error
       table)))
       
(define (multi-key-set! table keylist value)
  (define (multi-key-set-sub! table keylist value)
    (cond
      ((null? table) 'error)
      ((eq? (car table) 'table)
        (multi-key-set-sub! (cdr table) keylist value))
      ((eq? (caar table) (car keylist))
        (cond
          ((null? (cdr keylist))
            (set-in-table! table (car keylist) value))
          (else
            (multi-key-set-sub! (cdar table) (cdr keylist) value))))
      (else
        (multi-key-set-sub! (cdr table) keylist value))))
  (let ((result (multi-key-set-sub! table keylist value)))
    (if (eq? result 'error)
      'error
      table)))

(define (remove-from-table! table key)
  (cond
   ((null? (cdr table)) '())
   ((eq? (caadr table) key) (set-cdr! table (cddr table)))
   (else
    (remove-from-table! (cdr table) key))))
    
(define (make-table-closure)
  (closure-gen (init-table)))        

(define (make-table-from-assoc-list list)
  (cons 'table list))

(define (table-getter table symbol)
  ;For simplicity, since arguments don't matter anyway here and dialog-types.scm would rather like them not to, we use a variable arg list
  (lambda we-dont-care (get-from-table table symbol)))

(define (table-setter table symbol)
  (lambda (val) 
    (if (null? (get-from-table table symbol))
	(add-to-table! table symbol val)
	(set-in-table! table symbol val))))
		      