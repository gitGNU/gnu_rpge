;Main grid initialization, sets the tilegrid to an empty one.
(initialize-grid 50 40)
;Set all tiles at once.
(all-tiles (tile "tile2.png" (0 0 16 16) block-none))
;Replace one tile.
(tile 5 5 (tile "tile1.png" (0 0 16 16) block-all))
;Make a named mob.
(mob main 0 0 "sprite_letter.png")
;This bit illustrates anonymous mobs.
;They'll be properly taken care of, but are otherwise not very useful.
(mob 5 0 "sprite_letter.png")
;Add a binding for the mob's tile-change event, to lock
;the camera to this mob.
;Probably a generic enough utility to put somewhere else.
(mob-bind main 
	  tile-change 
	  (lambda (event)
	    (let ((newpos (cddr event)))
	      (set-camera-x (car newpos)) 
	      (set-camera-y (cadr newpos))
	      (set-main-grid (caddr newpos)))))
;Testing binding for a motion-start event.
;This just prints all the components of the event,
;albeit in a slightly clumsy fashion.
(mob-bind main
	  motion-start
	  (lambda (event)
	    (display "Motion change: ")
	    (newline)
	    (display "Moving ")
	    (display (cadr event))
	    (display " tiles to the right")
	    (newline)
	    (display "Moving ")
	    (display (caddr event))
	    (display " tiles down")
	    (newline)
	    (display "In ")
	    (display (cadddr event))
	    (display " frames")
	    (newline)))
;Testing binding for a motion-stop event.
;Since there's nothing particularly interesting to print,
;this just prints a message saying the mob was stopped.
(mob-bind main
	  motion-stop
	  (lambda (event)
	    (display "Mob stopped:")
	    (display (map-named-mob (get-named-map 'test) 'main))
	    (newline)
	    (queue-mob-motion! (map-named-mob (get-named-map 'test) 'main))))
;Make this grid the one rendered in the game window.
(show-grid)
